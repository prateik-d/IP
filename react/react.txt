ReactJS:-
What is React?
Current Version of React
Advantages & Disadvantages of React.
What is Virtual DOM?
What is the reconciliation process in react?
What is the Diffing algorithm in React?
Difference between DOM and Virtual DOM.
Why we use key in react
What is Component?
Difference Between State & Props
Is Props Mutable?
How can we pass Data from child to parent component in React.
What is Prop drilling?
Lifecycle methods of react.
Which lifecycle method is used to fire API's?
Difference between class components vs Functional components.
What is render hijacking?
What is render props?
Explain Hooks in React.
Explain  High Order Components.
Explain Pure components in react ?
use of useRef Hook?
What do you mean by Single Page Application.
What do you mean by Single Source Of Truth?
What is JEST.
Explain Error Boundaries
What is React Memo?
Explain Lazy Loading.
What is React Fiber?
Controlled VS Uncontrolled Elements in React
Explain React Portals in React
How to restrict re-rendering of Components
What is JSX?
Advantages & Disadvantages of JSX?
What is FLux?
What is Redux? 
What are the core principles of Redux?
What is Thunk
Explain saga

JAVASCRIPT:-
What is javascript?
Datatypes in Javascript.
What is DOM?
Difference between == and ===
What is hoisting?
Null vs undefined.
What is NaN in javascript?
Explain push,pop,shift,unshift methods in javascript.
Async/Await.
What is ES6? list some of its items
Explain Classes in javascript
Explain Spread operator
Explain rest parameter
Explain Destructuring
Explain Arrow functions
Difference between arrow & Regular function.
Difference between var vs let vs const.
What are the high order functions in Javascript?
Difference between map & filter
What is closure? Explain its uses?
What is High Order Function?
What is the Callback function?
Explain Event Loop in javascript.
Explain Event delegation in javascript.
Explain call(),apply(),bind()
What is function currying?
What is a prototype in javascript?
What is Memoization?
Explain promises.
What are generator functions?
Difference between Event Bubbling & Event capturing.
Explain strict
Explain debouncing
What is webpack?

HTML:-
What is Doctype?
Inline elements vs block elements.
What are Semantic elements?
Explain Local storage.
What are the new Input Types in HTML5?

CSS:-
What is Flex
Margin vs Padding
What are Pseudo class.
Why do we use Sass, does the browser directly use it?
Explain Box model.


Throttling
Imagine yourself as a 7-year-old toddler who loves to eat chocolate cake! Today your mom has made one, but it's not for you, it's for the guests! You, being spunky, keep on asking her for the cake. Finally, she gives you the cake. But, you keep on asking her for more. Annoyed, she agrees to give you more cake with a condition that you can have the cake only after an hour. Still, you keep on asking her for the cake, but now she ignores you. Finally, after an interval of one hour, you get more cake. If you ask for more, you will get it only after an hour, no matter how many times you ask her.

This is what throttling is!

Throttling is a technique in which, no matter how many times the user fires the event, the attached function will be executed only once in a given time interval.

For instance, when a user clicks on a button, a helloWorld function is executed which prints Hello, world on the console. Now, when throttling is applied with 1000 milliseconds to this helloWorld function, no matter how many times the user clicks on the button, Hello, world will be printed only once in 1000 milliseconds. Throttling ensures that the function executes at a regular interval.



Debouncing
Consider the same cake example. This time you kept on asking your mom for the cake so many times that she got annoyed and told you that she will give you the cake only if you remain silent for one hour. This means you wonâ€™t get the cake if you keep on asking her continuously - you will only get it one hour after last time you ask, once you stop asking for the cake. This is debouncing.

In the debouncing technique, no matter how many times the user fires the event, the attached function will be executed only after the specified time once the user stops firing the event.

For instance, suppose a user is clicking a button 5 times in 100 milliseconds. Debouncing will not let any of these clicks execute the attached function. Once the user has stopped clicking, if debouncing time is 100 milliseconds, the attached function will be executed after 100 milliseconds. Thus, to a naked eye, debouncing behaves like grouping multiple events into one single event.